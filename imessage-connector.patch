From bd1935eb2f6cf461995ad6aa5aa71cfaaca01daa Mon Sep 17 00:00:00 2001
From: Devin AI <158243242+devin-ai-integration[bot]@users.noreply.github.com>
Date: Thu, 19 Dec 2024 04:41:05 +0000
Subject: [PATCH] Add iMessage connector implementation

- Added iMessage connector for macOS systems
- Supports loading historical messages and polling for updates
- Handles hex-encoded message bodies
- Includes security checks for macOS environment

Co-Authored-By: ishandhanani@gmail.com <ishandhanani@gmail.com>
---
 backend/onyx/configs/constants.py             |   1 +
 backend/onyx/connectors/__init__.py           |   4 +
 backend/onyx/connectors/imessage/__init__.py  |   4 +
 backend/onyx/connectors/imessage/connector.py | 105 ++++++++++++++++++
 backend/onyx/connectors/imessage/utils.py     |  56 ++++++++++
 5 files changed, 170 insertions(+)
 create mode 100644 backend/onyx/connectors/imessage/__init__.py
 create mode 100644 backend/onyx/connectors/imessage/connector.py
 create mode 100644 backend/onyx/connectors/imessage/utils.py

diff --git a/backend/onyx/configs/constants.py b/backend/onyx/configs/constants.py
index d9e433df..55d79250 100644
--- a/backend/onyx/configs/constants.py
+++ b/backend/onyx/configs/constants.py
@@ -137,6 +137,7 @@ class DocumentSource(str, Enum):
     FRESHDESK = "freshdesk"
     FIREFLIES = "fireflies"
     EGNYTE = "egnyte"
+    IMESSAGE = "imessage"
 
 
 DocumentSourceRequiringTenantContext: list[DocumentSource] = [DocumentSource.FILE]
diff --git a/backend/onyx/connectors/__init__.py b/backend/onyx/connectors/__init__.py
index e69de29b..04bbdec9 100644
--- a/backend/onyx/connectors/__init__.py
+++ b/backend/onyx/connectors/__init__.py
@@ -0,0 +1,4 @@
+"""Onyx connector implementations."""
+from onyx.connectors.imessage.connector import IMessageConnector
+
+__all__ = ["IMessageConnector"]
diff --git a/backend/onyx/connectors/imessage/__init__.py b/backend/onyx/connectors/imessage/__init__.py
new file mode 100644
index 00000000..ef3a8051
--- /dev/null
+++ b/backend/onyx/connectors/imessage/__init__.py
@@ -0,0 +1,4 @@
+"""
+iMessage connector for Onyx.
+Enables indexing and searching of iMessage conversations from macOS systems.
+"""
diff --git a/backend/onyx/connectors/imessage/connector.py b/backend/onyx/connectors/imessage/connector.py
new file mode 100644
index 00000000..170930b0
--- /dev/null
+++ b/backend/onyx/connectors/imessage/connector.py
@@ -0,0 +1,105 @@
+"""
+iMessage connector implementation.
+Provides access to iMessage conversations through macOS chat.db database.
+"""
+import os
+from datetime import datetime
+import sqlite3
+from typing import Any, Iterator
+
+from onyx.connectors.interfaces import LoadConnector, PollConnector
+from onyx.connectors.models import ConnectorMissingCredentialError, Document, Section
+from onyx.configs.constants import DocumentSource
+from onyx.connectors.imessage.utils import create_document_from_chat
+
+
+class IMessageConnector(LoadConnector, PollConnector):
+    def __init__(self) -> None:
+        self.db_path: str | None = None
+        self.conn: sqlite3.Connection | None = None
+
+    def load_credentials(self, credentials: dict[str, Any]) -> dict[str, Any] | None:
+        self.db_path = os.path.expanduser(
+            credentials.get("db_path", "~/Library/Messages/chat.db")
+        )
+
+        if not os.path.exists(self.db_path):
+            raise ConnectorMissingCredentialError("iMessage")
+
+        return credentials
+
+    def _load_messages(
+        self, start_time: float | None = None, end_time: float | None = None
+    ) -> Iterator[list[Document]]:
+        if not self.db_path:
+            return
+
+        try:
+            self.conn = sqlite3.connect(self.db_path)
+            cursor = self.conn.cursor()
+
+            query = """
+            SELECT
+                chat.ROWID as chat_id,
+                chat.chat_identifier,
+                message.ROWID,
+                message.attributedBody,
+                message.date,
+                message.is_from_me,
+                handle.id as sender
+            FROM chat
+            JOIN chat_message_join ON chat.ROWID = chat_message_join.chat_id
+            JOIN message ON chat_message_join.message_id = message.ROWID
+            LEFT JOIN handle ON message.handle_id = handle.ROWID
+            """
+
+            conditions = []
+            params = []
+            if start_time is not None:
+                conditions.append("message.date >= ?")
+                params.append(int(start_time * 1e9))
+            if end_time is not None:
+                conditions.append("message.date <= ?")
+                params.append(int(end_time * 1e9))
+
+            if conditions:
+                query += " WHERE " + " AND ".join(conditions)
+
+            query += " ORDER BY chat.ROWID, message.date"
+            cursor.execute(query, params)
+
+            current_chat_id = None
+            current_chat_messages = []
+            current_chat_data = {}
+
+            for row in cursor:
+                chat_id, chat_identifier, msg_id, body, date, is_from_me, sender = row
+
+                if current_chat_id != chat_id:
+                    if current_chat_messages:
+                        yield [create_document_from_chat(current_chat_data, current_chat_messages)]
+
+                    current_chat_id = chat_id
+                    current_chat_data = {"chat_identifier": chat_identifier}
+                    current_chat_messages = []
+
+                current_chat_messages.append({
+                    "attributedBody": body,
+                    "date": date,
+                    "is_from_me": bool(is_from_me),
+                    "sender": sender
+                })
+
+            if current_chat_messages:
+                yield [create_document_from_chat(current_chat_data, current_chat_messages)]
+
+        finally:
+            if self.conn:
+                self.conn.close()
+                self.conn = None
+
+    def load_from_state(self) -> Iterator[list[Document]]:
+        yield from self._load_messages()
+
+    def poll_source(self, start: float, end: float) -> Iterator[list[Document]]:
+        yield from self._load_messages(start_time=start, end_time=end)
diff --git a/backend/onyx/connectors/imessage/utils.py b/backend/onyx/connectors/imessage/utils.py
new file mode 100644
index 00000000..52b3149d
--- /dev/null
+++ b/backend/onyx/connectors/imessage/utils.py
@@ -0,0 +1,56 @@
+"""
+Utility functions for iMessage connector.
+Handles message decoding and data conversion operations.
+"""
+import binascii
+from datetime import datetime
+from typing import Any
+
+from onyx.connectors.models import Document, Section
+from onyx.configs.constants import DocumentSource
+
+
+def decode_attributed_body(hex_blob: str | None) -> str:
+    if not hex_blob:
+        return ""
+
+    try:
+        clean_hex = ''.join(c for c in hex_blob if c in '0123456789abcdefABCDEF')
+        decoded = binascii.unhexlify(clean_hex).decode('utf-8', errors='ignore')
+        message_start = decoded.find("NSString")
+        if message_start != -1:
+            content_start = decoded.find('"', message_start)
+            content_end = decoded.find('"', content_start + 1)
+            if content_start != -1 and content_end != -1:
+                return decoded[content_start + 1:content_end]
+
+        return decoded.strip()
+    except (binascii.Error, UnicodeDecodeError):
+        return ""
+
+
+def create_document_from_chat(chat_data: dict[str, Any], messages: list[dict[str, Any]]) -> Document:
+    chat_id = chat_data["chat_identifier"]
+
+    sections = []
+    for msg in messages:
+        text = decode_attributed_body(msg.get("attributedBody"))
+        sender = "Me" if msg.get("is_from_me") else msg.get("sender", "Unknown")
+        timestamp = datetime.fromtimestamp(msg.get("date", 0) / 1e9)
+
+        section_text = f"{sender} ({timestamp.strftime('%Y-%m-%d %H:%M:%S')}): {text}"
+        sections.append(Section(text=section_text, link=None))
+
+    return Document(
+        id=f"imessage-chat-{chat_id}",
+        sections=sections,
+        source=DocumentSource.IMESSAGE,
+        semantic_identifier=f"iMessage Chat: {chat_id}",
+        metadata={
+            "chat_identifier": chat_id,
+            "participant_count": str(len(set(m.get("sender", "") for m in messages))),
+        },
+        doc_updated_at=datetime.fromtimestamp(
+            max(m.get("date", 0) for m in messages) / 1e9
+        ) if messages else None
+    )
-- 
2.34.1

